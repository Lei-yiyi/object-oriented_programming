# -*- coding: utf-8 -*-

"""
Created on 2020-05-16

Updated on 2020-05-16

@author: 小小磊

@requirements: Python 3.5

@decription: Python 方法（实例方法、类方法、静态方法）

@ref: https://github.com/Lei-yiyi/object-oriented_programming/blob/master/methods.py
"""

"""
-----------------------------------------------------------------------------------------
方法：
实例方法 —— 在类下创建的方法, 如果带 self, 那么它叫做实例方法
类方法 —— 使用 @classmethod 定义
静态方法 —— 使用 @staticmethod 定义
-----------------------------------------------------------------------------------------
实例方法：

    在类的外面

            调用
                            类名.实例方法()（错误用法，执行报错）
                对象.实例方法()

    在类的里面

            调用　　
                            类名.实例方法()（错误用法，执行报错）
                self.实例方法()
                            cls.实例方法()（错误用法，执行报错）
                
# 实例方法, 在类外调用, 使用 对象.实例方法()

# 实例方法, 在类下调用, 使用 self.实例方法()
-----------------------------------------------------------------------------------------
类方法：

    在类的外面

            调用
                类名.类方法()
                对象.类方法()

    在类的里面

            调用
                类名.类方法()　
                self.类方法()
                
            
# 类方法, 在类外调用, 使用 类名.类方法()
# 类方法, 在类外调用, 使用 对象.类方法()

# 类方法, 在类下调用, 使用 类名.类方法()
# 类方法, 在类下调用, 使用 self.类方法()
-----------------------------------------------------------------------------------------
静态方法：

    在类的外面

            调用
                类名.静态方法(参数)
                对象.静态方法(参数)

    在类的里面

            调用
                类名.静态方法(参数)　　
                self.静态方法(参数)
                cls.静态方法(参数)
                

# 静态方法, 在类外调用, 使用 类名.静态方法(参数)
# 静态方法, 在类外调用, 使用 对象.静态方法(参数)

# 静态方法, 在类下调用, 使用 类名.静态方法(参数)
# 静态方法, 在类下调用, 使用 self.静态方法(参数)
# 静态方法, 在类下调用, 使用 cls.静态方法(参数)
-----------------------------------------------------------------------------------------
注：对象不能调用类外面的函数
-----------------------------------------------------------------------------------------
"""


class PeopleInfo:

    head = 1

    def __init__(self, name, age, height):

        self.fair = "假发"

        self.name = name
        self.age = age
        self.height = height

        print("1 实例方法, 在类下调用, 使用 self.实例方法()：", self.run())

        print("2 类方法, 在类下调用, 使用 类名.类方法()：", PeopleInfo.angry())
        print("3 类方法, 在类下调用, 使用 self.类方法()：", self.angry())

        print("4 静态方法, 在类下调用, 使用 类名.静态方法(参数)：", PeopleInfo.weather('晴朗'))
        print("5 静态方法, 在类下调用, 使用 self.静态方法(参数)：", self.weather('晴朗'))

    def run(self):
        """
        实例方法 —— 在类下创建的方法, 如果带 self, 那么它叫做实例方法
        """
        return self.name + '会跑步'

    @classmethod  # 装饰器, 类方法来处理类属性的
    def angry(cls):  # 如果不加装饰器, 默认创建实例方法(当对象调用类方法时, 会把对象所属的类ID自动赋值给cls)
        """
        类方法 —— 使用 @classmethod 定义
        """
        return '生气'

    @classmethod
    def smile(cls):
        print("6 静态方法, 在类下调用, 使用 cls.静态方法(参数)：", cls.weather('晴朗'))

    @staticmethod
    def weather(motion):  # 静态跟类外面定义的函数几乎没有区别, 只是位置不同
        """
        静态方法 —— 使用 @staticmethod 定义
        """
        return motion


one_person = PeopleInfo("张三", 20, 170)
one_person.smile()

# =======================================================================================
print("7 实例方法, 在类外调用, 使用 对象.实例方法()：", one_person.run())

# =======================================================================================
print("8 类方法, 在类外调用, 使用 类名.类方法()：", PeopleInfo.angry())
print("9 类方法, 在类外调用, 使用 对象.类方法()：", one_person.angry())

# =======================================================================================
print("10 静态方法, 在类外调用, 使用 类名.静态方法(参数)：", PeopleInfo.weather('晴朗'))
print("11 静态方法, 在类外调用, 使用 对象.静态方法(参数)：", one_person.weather('晴朗'))
